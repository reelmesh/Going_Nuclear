[gd_resource type="ShaderMaterial" load_steps=5 format=3 uid="uid://m478ve782nbq"]

[sub_resource type="Shader" id="Shader_k6ext"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_g, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(0.0, 1.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Emission: Enabled
	vec3 emission_tex = texture(texture_emission, base_uv).rgb;
	// Emission Operator: Add
	EMISSION = (emission.rgb + emission_tex) * emission_energy;
}
"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_ljcms"]
load_path = "res://.godot/imported/console_EnemyButton_Color_1024.png-c705e28e035c836146474b0689967094.s3tc.ctex"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_b64cp"]
load_path = "res://.godot/imported/console_EnemyButton_Transmission_1024.png-421b1b9ff1f2ae57f5c02c50cd672884.s3tc.ctex"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_rakrm"]
load_path = "res://.godot/imported/console_EnemyButton_Normal_1024.png-4f453707fdaa6fe87916fa6868188532.s3tc.ctex"

[resource]
resource_name = "EnemyLightLEDBake"
render_priority = 0
shader = SubResource("Shader_k6ext")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = SubResource("CompressedTexture2D_ljcms")
shader_parameter/albedo_texture_size = Vector2i(1024, 1024)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.6
shader_parameter/texture_metallic = SubResource("CompressedTexture2D_b64cp")
shader_parameter/metallic_texture_channel = Vector4(0, 0, 1, 0)
shader_parameter/texture_roughness = SubResource("CompressedTexture2D_b64cp")
shader_parameter/specular = 0.8
shader_parameter/metallic = 0.0
shader_parameter/emission = Color(0.531462, 0.00275249, 0, 1)
shader_parameter/emission_energy = 0.5
shader_parameter/texture_normal = SubResource("CompressedTexture2D_rakrm")
shader_parameter/normal_scale = 7.6e-07
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

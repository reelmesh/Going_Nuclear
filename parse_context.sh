#!/bin/bash

# This script parses the ai_context_export.json file generated by the Godot
# AI Context Generator plugin and creates a human-readable Markdown summary.
#
# Requirements:
# - jq: A command-line JSON processor.
#   (Install on Debian/Ubuntu: sudo apt-get install jq)
#   (Install on macOS: brew install jq)
#
# Usage:
#   ./parse_context.sh

set -e

INPUT_FILE="ai_context_export.json"
OUTPUT_FILE="PROJECT_STRUCTURE.md"

# Check if jq is installed
if ! command -v jq &> /dev/null
then
    echo "Error: jq is not installed. Please install it to continue."
    echo "e.g., sudo apt-get install jq OR brew install jq"
    exit 1
fi

# Check if the input file exists
if [ ! -f "$INPUT_FILE" ]; then
    echo "Error: Input file not found at $INPUT_FILE"
    echo "Please generate it from the Godot editor first."
    exit 1
fi

# --- Markdown Header ---
{
    echo "# Project Structure Summary"
    echo ""
    echo "*Generated from \`$INPUT_FILE\` on $(date)*"
    echo ""
} > "$OUTPUT_FILE"

# --- Autoloads / Singletons ---
echo "## Autoloads" >> "$OUTPUT_FILE"
jq -r '
    .autoloads | to_entries | .[] | "- **\(.key):** `\(.value)`"
' "$INPUT_FILE" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# --- Scenes ---
echo "## Scenes" >> "$OUTPUT_FILE"
jq -c '.scenes[]' "$INPUT_FILE" | while read -r scene; do
    scene_path=$(echo "$scene" | jq -r '.path')
    echo "### \`$scene_path\`" >> "$OUTPUT_FILE"
    echo "**Node Tree:**" >> "$OUTPUT_FILE"
    echo "$scene" | jq -r '
        def print_nodes($indent):
            "\(.) | \"\($indent)- **\(.name)** (`\(.type)`)\" + (if .script and .script != \"\" then \" - *Script: `\(.script)`*\" else \"\" end)",
            (.children[]? | print_nodes("  " + $indent));
        .root_node | print_nodes("")
    ' >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
done

# --- Scripts ---
echo "## Scripts" >> "$OUTPUT_FILE"
jq -c '.scripts[]' "$INPUT_FILE" | while read -r script; do
    script_path=$(echo "$script" | jq -r '.path')
    echo "### \`$script_path\`" >> "$OUTPUT_FILE"
    signals=$(echo "$script" | jq -r '.signals | if length > 0 then "**Signals:**\n" + (.[] | "- `\(.)`\n") else "" end')
    if [ -n "$signals" ]; then
        echo "$signals" >> "$OUTPUT_FILE"
    fi
    functions=$(echo "$script" | jq -r '.functions | if length > 0 then "**Functions:**\n" + (.[] | "- `\(.)`\n") else "" end')
    if [ -n "$functions" ]; then
        echo "$functions" >> "$OUTPUT_FILE"
    fi
    echo "" >> "$OUTPUT_FILE"
done

echo "Successfully generated project structure summary at $OUTPUT_FILE"
